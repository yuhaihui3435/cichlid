package com.dbd.cms.model;

import com.dbd.cms.Consts;
import com.dbd.cms.model.base.BaseTaxonomy;

import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Taxonomy extends BaseTaxonomy<Taxonomy> {

	private long contentCount=0;
	public static final Taxonomy dao = new Taxonomy();

	public int getPId(){
		return getParentId().intValue();
	}

	public String getName(){
		return getTitle();
	}

	public boolean getIsParent(){
		List<Taxonomy> children=dao.find("select * from c_taxonomy where parent_id=? and d_at is null ",getId());
		if(children.isEmpty()){
			return false;
		}else{
			return true;
		}
	}

	public Taxonomy findByTitleByCache(String title){
		String sql="select * from c_taxonomy where title=? and d_at is null and type='tag' ";
		return dao.findFirstByCache(Consts.CACHE_NAMES.taxonomy.name(),"findByTitleByCache"+title,sql,title);
	}

	public List<Taxonomy> findCatalog(){
		return dao.findByCache(Consts.CACHE_NAMES.taxonomy.name(),Consts.T_CATALOG_CK,"select * from c_taxonomy where type='catalog' and d_at is null and parent_id<>0 order by order_number ");
	}

	public List<Taxonomy> findArea(){
		return dao.findByCache(Consts.CACHE_NAMES.taxonomy.name(),Consts.T_AREA_CK,"select * from c_taxonomy where type='area' and d_at is null and parent_id<>0 order by order_number");
	}

	public List<Taxonomy> findTag(){

		return dao.findByCache(Consts.CACHE_NAMES.taxonomy.name(),Consts.T_TAG_CK,"select * from c_taxonomy where type='tag' and d_at is null and parent_id<>0 order by order_number");
	}

	public List<Taxonomy> findSubGroup(){
		return dao.findByCache(Consts.CACHE_NAMES.taxonomy.name(),Consts.T_SUBGROUP_CK,"select a.* from c_taxonomy a,(select * from c_taxonomy where type='subGroup' and d_at is null and parent_id=0) b where a.type='subGroup' and a.d_at is null and a.parent_id<>0 and a.parent_id=b.id order by a.order_number");
	}
	public List<Taxonomy> findSpecies(){
		return dao.findByCache(Consts.CACHE_NAMES.taxonomy.name(),Consts.T_SPECIES_CK,"select a.* from c_taxonomy a,(select * from c_taxonomy where type='species' and d_at is null and parent_id=0) b where a.type='species' and a.d_at is null and a.parent_id<>0 and a.parent_id=b.id order by a.order_number");
	}
	public List<Taxonomy> findOrderSupport(){
		return dao.findByCache(Consts.CACHE_NAMES.taxonomy.name(),Consts.T_ORDERSUPPORT_CK,"select a.* from c_taxonomy a,(select * from c_taxonomy where type='orderSupport' and d_at is null and parent_id=0) b where a.type='orderSupport' and a.d_at is null and a.parent_id<>0 and a.parent_id=b.id order by a.order_number");
	}
	public List<Taxonomy> findAllSpecies(){
		return dao.findByCache(Consts.CACHE_NAMES.taxonomy.name(),Consts.T_ALL_SPECIES_CK,"select a.* from c_taxonomy a where a.type='species' and a.d_at is null and a.parent_id<>0  order by a.order_number");
	}


	public List<Taxonomy> findChildrenByPId(int pId){
		return dao.findByCache(Consts.CACHE_NAMES.taxonomy.name(),"pId"+pId,"select * from c_taxonomy where d_at is null and parent_id=? order by order_number",pId);
	}

	@Override
	public Long getContentCount() {
		return contentCount;
	}

	public void setContentCount(long contentCount) {
		this.contentCount = contentCount;
	}

	public Taxonomy findByContentId(int cId){
		String sql="select ct.* from c_mapping cm,c_taxonomy ct where cm.taxonomy_id=ct.id and ct.d_at is null and cm.content_id=? and ct.type='catalog'";
		return Taxonomy.dao.findFirst(sql,cId);
	}

}
