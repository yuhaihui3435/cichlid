package com.dbd.cms.model;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.dbd.cms.Consts;
import com.dbd.cms.kits.DateKit;
import com.dbd.cms.model.base.BaseOrderdetail;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.ehcache.CacheKit;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Orderdetail extends BaseOrderdetail<Orderdetail> {
	public static final Orderdetail dao = new Orderdetail().dao();


	public void findOrderdetailWithKbRelation(){
		CacheKit.removeAll(Consts.CACHE_NAMES.orderinfoAndKbRelation.name());
		String sql="select distinct(scientificName) as scientificName,kbId from f_orderdetail where d_at is null and kbId is not null ";
		List<Record> list=Db.findByCache(Consts.CACHE_NAMES.orderinfo.name(),"findOrderinfoWithKbRelation",sql);
		Record record=null;
		for (int i = 0; i < list.size(); i++) {
			record=list.get(i);
			if(StrKit.notBlank(record.getStr("scientificName"))&&record.getInt("kbId")!=null)
				CacheKit.put(Consts.CACHE_NAMES.orderinfoAndKbRelation.name(),record.getStr("scientificName").trim(),record.getInt("kbId"));
		}
	}

	public List<Orderdetail> findByOrderinfoId(Integer orderinfoId){
		return Orderdetail.dao.find("select * from f_orderdetail where orderinfoId=?",orderinfoId);
	}

	public List<Orderdetail> findCatalogName(Integer orderinfoId){
		List<Orderdetail> list=Orderdetail.dao.findByCache(Consts.CACHE_NAMES.orderinfo.name(),"findCatalogName"+orderinfoId,"select distinct(catalogName) as catalogName from f_orderdetail where orderinfoId=? and catalogName is not null and catalogName!=''",orderinfoId);
		return list;
	}

	public List<Orderdetail> findByScientificNameTrim(String string){
		return Orderdetail.dao.find("select * from f_orderdetail where trim(scientificName)=?",string);
	}

	/**
	 * 统计鱼出现在订单的次数
	 * @param odId 详细id
	 * @return
	 */
	public List<JSONObject> statisticsCount(Integer odId){
		Orderdetail od=Orderdetail.dao.findById(odId);
		String scName=od.getScientificName();
		Date tenYearAgo= DateKit.agoYear(10,null);
		//Date yearFirstDay=DateKit.getYearFirst(tenYearAgo);
		List<Record> orderinfoNames=findDisOIByScName(scName);
		List<JSONObject> rs=new ArrayList<JSONObject>();
		String oiName=null;
		String sql=null;
		List<Record> statisticsRs=null;
		Record record=null;
		JSONArray jsonArray=null;
		JSONObject jo=null;
		for (int i = 0; i < orderinfoNames.size(); i++) {
			oiName=orderinfoNames.get(i).getStr("zhName");
			sql="select year(b.`orderDate`) as orderYear,count(id) as num from " +
					"(select distinct orderinfoId,scientificName from f_orderdetail where scientificName=?) a," +
					"(select id,orderDate from f_orderinfo  where zhName = ?) b " +
					"where a.orderinfoId=b.id and year(b.orderDate)>=year(?) group by year(b.`orderDate`)";
			statisticsRs=Db.find(sql,scName,oiName,tenYearAgo);
			if(!statisticsRs.isEmpty()) {
				jsonArray=new JSONArray();
				for (int j = 0; j < statisticsRs.size(); j++) {
					record = statisticsRs.get(j);
					jo = new JSONObject();
					jo.put("orderYear", record.get("orderYear"));
					jo.put("num", record.getLong("num"));
					jo.put("orderinfoName",oiName);
					jsonArray.add(jo);
				}
				jo=new JSONObject();
				jo.put(oiName,jsonArray);
				rs.add(jo);
			}
		}
		return rs;
	}

	public JSONArray statisticsPrice(Integer odId){
		Date twoYearAgo= DateKit.agoYear(2,null);
		Orderdetail od=Orderdetail.dao.findById(odId);
		List<JSONObject> rs=new ArrayList<JSONObject>();
		List<Record> statisticsRs=null;
		Record record=null;
		JSONArray jsonArray=new JSONArray();
		JSONObject jo=null;
		Map<String,Object> map=null;

			StringBuilder sql=new StringBuilder("select a.`scientificName` as scientificName,a.size as size,a.`strain` as strain,a.price as price,date_format(b.orderDate,'%Y-%c-%d') as orderDate from " +
					"(select  orderinfoId,scientificName,size,price,`strain` from f_orderdetail where scientificName='"+od.getScientificName()+"'") ;
					if(StrKit.notBlank(od.getSize()))
						sql.append(" and size='"+od.getSize()+"'" );
					if(StrKit.notBlank(od.getStrain()))
						sql.append(" and strain='"+od.getStrain()+"'" );
					sql.append(") a,");

					sql.append(
					" (select id,orderDate,name from f_orderinfo  where zhName = '"+od.getOrderinfoZhname()+"') b " +
					" where a.orderinfoId=b.id and year(b.orderDate)>=year('"+DateKit.dateToStr(twoYearAgo,DateKit.yyyy_MM_dd)+"')  order by b.orderDate desc");
			statisticsRs=Db.find(sql.toString());
			if(!statisticsRs.isEmpty()) {
				for (int i = 0; i < statisticsRs.size(); i++) {
					record=statisticsRs.get(i);
					map=record.getColumns();
					jo=new JSONObject(map);
					jsonArray.add(jo);
				}

			}
		return jsonArray;
	}

	public List<Record> findDisOIByScName(String scName){
		String sql="select DISTINCT(oi.zhName) as zhName from f_orderdetail od left join f_orderinfo oi on od.orderinfoId=oi.id where od.scientificName=?";
		return Db.find(sql,scName);
	}

	public String getOrderinfoZhname(){
		Orderinfo orderinfo=Orderinfo.dao.findById(getOrderinfoId());

		return (orderinfo!=null)?orderinfo.getZhName():"";
	}

}
