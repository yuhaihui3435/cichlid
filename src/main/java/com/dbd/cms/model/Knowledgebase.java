package com.dbd.cms.model;

import com.dbd.cms.Consts;
import com.dbd.cms.model.base.BaseKnowledgebase;
import com.jfinal.kit.StrKit;

import java.util.ArrayList;
import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Knowledgebase extends BaseKnowledgebase<Knowledgebase> {
	public static final Knowledgebase dao = new Knowledgebase();

	public String getSgTxt(){
//		Taxonomy p=Taxonomy.dao.findFirstByCache(Consts.CACHE_NAMES.taxonomy.name(),"taxonomy-"+getSgId(),"select * from c_taxonomy where id=?",getSgId());
//		return (p!=null)?p.getTitle():"";
		return getStr("sgTxt");
	}

	public String getSpeciesTxt(){
//		Taxonomy p=Taxonomy.dao.findFirstByCache(Consts.CACHE_NAMES.taxonomy.name(),"taxonomy-"+getSpeciesId(),"select * from c_taxonomy where id=?",getSpeciesId());
//		return (p!=null)?p.getTitle():"";
		return getStr("speciesTxt");
	}
	public String getAreaTxt(){
//		Area area=Area.dao.findFirstByCache(Consts.CACHE_NAMES.fArea.name(),Consts.CACHE_NAMES.fArea.name()+getAreaId(),"select * from f_area where id=?",getAreaId());
//		if(area==null){
//			return "";
//		}
//		if(!StrKit.isBlank(area.getZhName()))
//			return (area!=null)?area.getEnName()+"("+area.getZhName()+")":"";
//		else
//			return area.getEnName();
		return getStr("areaTxt");
	}
	public String getFhTxt(){
//		Param p=Param.dao.findFirstByCache(Consts.CACHE_NAMES.paramCache.name(),"param-"+getFh(),"select * from s_param where id=?",getFh());
//		return (p!=null)?p.getVal():"";
		return getStr("fhTxt");
	}
	public String getRtTxt(){
//		Param p=Param.dao.findFirstByCache(Consts.CACHE_NAMES.paramCache.name(),"param-"+getRt(),"select * from s_param where id=?",getRt());
//		return (p!=null)?p.getVal():"";
		return getStr("rtTxt");
	}
	public String getMfTxt(){
//		Param p=Param.dao.findFirstByCache(Consts.CACHE_NAMES.paramCache.name(),"param-"+getMf(),"select * from s_param where id=?",getMf());
//		return (p!=null)?p.getVal():"";
		return getStr("mfTxt");
	}
	public String getBreedTxt(){
//		Param p=Param.dao.findFirstByCache(Consts.CACHE_NAMES.paramCache.name(),"param-"+getBreed(),"select * from s_param where id=?",getBreed());
//		return (p!=null)?p.getVal():"";
		return getStr("breedTxt");
	}
	public String getHaTxt(){
//		Param p=Param.dao.findFirstByCache(Consts.CACHE_NAMES.paramCache.name(),"param-"+getHa(),"select * from s_param where id=?",getHa());
//		return (p!=null)?p.getVal():"";
		return getStr("haTxt");
	}
	public String getCaTxt(){
//		Param p=Param.dao.findFirstByCache(Consts.CACHE_NAMES.paramCache.name(),"param-"+getCa(),"select * from s_param where id=?",getCa());
//		return (p!=null)?p.getVal():"";
		return getStr("caTxt");
	}
	public String getRareTxt(){
//		Param p=Param.dao.findFirstByCache(Consts.CACHE_NAMES.paramCache.name(),"param-"+getRare(),"select * from s_param where id=?",getRare());
//		return (p!=null)?p.getVal():"";
		return getStr("rareTxt");
	}
	public String getReproduceTxt(){
//		Param p=Param.dao.findFirstByCache(Consts.CACHE_NAMES.paramCache.name(),"param-"+getReproduce(),"select * from s_param where id=?",getReproduce());
//		return (p!=null)?p.getVal():"";
		return getStr("reproduceTxt");
	}

	public String getOperTxt(){
//		User user=User.dao.findFirstByCache(Consts.CACHE_NAMES.user.name(),"userInfo-"+getOper(),"select * from s_user where id=?",getOper());
//		return user.getNickname();
		return getStr("operTxt");
	}

	public Integer findSubGroupPId(Integer id){
		if(id==null)return null;
		Taxonomy taxonomy=Taxonomy.dao.findFirst("select a.* from c_taxonomy a,(select * from c_taxonomy where id=? ) b where a.id=b.parent_id",id);
		return taxonomy.getId().intValue();
	}
	public Integer findSpeciesPId(Integer id){
		if(id==null)return null;
		Taxonomy taxonomy=Taxonomy.dao.findFirst("select a.* from c_taxonomy a,(select * from c_taxonomy where id=? ) b where a.id=b.parent_id",id);
		return taxonomy.getId().intValue();
	}

	public List<Taxonomy> findCurrSubGroups(Integer sgId){
		Integer id=findSubGroupPId(sgId);
		if(id==null)return null;
		List<Taxonomy> list=Taxonomy.dao.findChildrenByPId(id);
		return list;
	}

	public List<Taxonomy> findCurrSpecies(Integer sId){
		Integer id=findSpeciesPId(sId);
		if(id==null)return null;
		return Taxonomy.dao.findChildrenByPId(id);
	}

	public List<Habitat> getHabitats(){
		List<Habitat> list=Habitat.dao.findByCache(Consts.CACHE_NAMES.habitat.name(),Consts.CACHE_NAMES.habitat.name()+getId(),"select * from f_habitat where fId=?",getId());
		return list;
	}

	public String getHabitatsTxt(){
		List<Habitat> list=getHabitats();
		StringBuilder stringBuilder=new StringBuilder();
		int i=0;
		for(Habitat h:list){
			if(i==0)
				stringBuilder.append(h.getTxt());
			else
				stringBuilder.append("/").append(h.getTxt());
			i++;
		}
		return stringBuilder.toString();
	}

	/**
	 * 随机查询一定数量的知识
	 * @param limit	if limit==0  limit=9；
	 * @return
	 */
	public List<Knowledgebase> findByRand(int limit){
		if(limit==0) limit=9;
		String sql="SELECT t1.* " +
				"FROM `f_knowledgebase` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `f_knowledgebase` where d_at is null and thumbnail is not null)-(SELECT MIN(id) FROM `f_knowledgebase` where d_at is null and thumbnail is not null))+(SELECT MIN(id) FROM `f_knowledgebase` where d_at is null and thumbnail is not null)) AS id) AS t2 " +
				"WHERE t1.id >= t2.id and t1.d_at is null and t1.thumbnail is not null and t1.thumbnail !='' " +
				"ORDER BY t1.id LIMIT 1";


		List<Knowledgebase> list=new ArrayList<Knowledgebase>();
		List<Long> ids=new ArrayList<Long>();
		Knowledgebase knowledgebase=null;
		for (int i = 0; i < limit; i++) {
			knowledgebase=dao.findFirst(sql);
			if (StrKit.isBlank(knowledgebase.getThumbnail())||ids.contains(knowledgebase.getId())){
				i--;
			}
			else
			{
				ids.add(knowledgebase.getId());
				list.add(knowledgebase);
			}
		}

		//LogKit.info(JsonKit.toJson(list));

		return list;
	}

	public List<Knowledgebase> findNew(int limit){
		String sql="select * from f_knowledgebase where d_at is null  order By c_at desc limit ?";
		return dao.findByCache(Consts.CACHE_NAMES.knowledge.name(),"findNew"+limit,sql,limit);
	}





}
