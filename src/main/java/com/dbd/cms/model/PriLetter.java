package com.dbd.cms.model;

import com.dbd.cms.Consts;
import com.dbd.cms.model.base.BasePriLetter;
import com.jfinal.plugin.activerecord.Db;

import java.math.BigInteger;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class PriLetter extends BasePriLetter<PriLetter> {

	public static final PriLetter dao = new PriLetter().dao();

	private User fromUser;
	private User toUser;
	private String lastTxt;
	private PriLetterRecord priLetterRecord=null;

//	private List<PriLetterRecord> priLetterRecordList=new ArrayList<PriLetterRecord>();
//
//	public List<PriLetterRecord> getPriLetterRecordList() {
//		priLetterRecordList=PriLetterRecord.dao.findByCache(Consts.CACHE_NAMES.priLetter.name(),"getPriLetterRecordList"+getId(),"select * from s_pri_letter_record where splId=? and dAt is null order by cAt desc",getId());
//		return priLetterRecordList;
//	}

	public long getPriBetterRecordCount(){
		Long count=(Long) Db.queryLong("select count(*) from s_pri_letter_record where splId=? and dAt is null order by cAt ",getId());
		return count;
	}


	public String getLastTxt() {
//		PriLetterRecord priLetterRecord=PriLetterRecord.dao.findFirst("select * from s_pri_letter_record where splId=? and dAt is null order by cAt desc limit 1",getId());
		queryLastPriBetterRecord();
		lastTxt=priLetterRecord.getTxt();
		return lastTxt;
	}

	public String  getLastTime(){
//		PriLetterRecord priLetterRecord=PriLetterRecord.dao.findFirst("select * from s_pri_letter_record where splId=? and dAt is null order by cAt desc  limit 1",getId());
		queryLastPriBetterRecord();
		return priLetterRecord.getCAtTxt();
	}

	public void queryLastPriBetterRecord(){
			if(priLetterRecord==null)
		  		priLetterRecord=PriLetterRecord.dao.findFirst("select * from s_pri_letter_record where splId=? and dAt is null order by cAt desc limit 1",getId());
	}

	public User getFromUser() {

		fromUser=User.dao.findFirstByCache(Consts.CACHE_NAMES.user.name(),new BigInteger(getFromUserId().toString()),"select * from s_user where status='0' and id=? ",new BigInteger(getFromUserId().toString()));
		return fromUser;
	}

	public User getToUser() {
		toUser=User.dao.findFirstByCache(Consts.CACHE_NAMES.user.name(),new BigInteger(getToUserId().toString()),"select * from s_user where status='0' and id=? ",new BigInteger(getToUserId().toString()));
		return toUser;
	}

	public PriLetter findByFromUserAndToUser(Integer fromUserId, Integer toUserId){
		return PriLetter.dao.findFirst("select * from s_pri_letter where (fromUserId=? and toUserId=?) or (fromUserId=? and toUserId=?) and dAt is null", fromUserId, toUserId, toUserId, fromUserId);
	}
}
