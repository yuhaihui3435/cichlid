package com.dbd.cms.model;

import com.dbd.cms.Consts;
import com.dbd.cms.kits.DateKit;
import com.dbd.cms.model.base.BaseContent;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Content extends BaseContent<Content> {
	public static final Content dao = new Content();
	private String userName;
	private String authorAvatar;

	public String getUserName(){
		this.userName=(User.dao.findFirstByCache(Consts.CACHE_NAMES.user.name(),getUserId(),"select * from s_user where status='0' and id=? ",getUserId())!=null)?User.dao.findById(getUserId()).getNickname():"";
		return userName;
	}

	public String getAuthorAvatar() {
		authorAvatar=User.dao.findFirstByCache(Consts.CACHE_NAMES.user.name(),getUserId(),"select * from s_user where status='0' and id=? ",getUserId()).getAvatar();
		return authorAvatar;
	}

	public String getCatTxt(){
		return (getCAt()!=null)? DateKit.dateToStr(getCAt(),DateKit.STR_DATEFORMATE):"";
	}

	public String getStatusTxt(){
		if(getStatus().equals(Consts.CHECK_STATUS.normal.getVal())){
			return Consts.CHECK_STATUS.normal.getValTxt();
		}else if(getStatus().equals(Consts.CHECK_STATUS.waitingCheck.getVal())){
			return Consts.CHECK_STATUS.waitingCheck.getValTxt();
		}else if(getStatus().equals(Consts.CHECK_STATUS.revokeCheck.getVal())){
			return Consts.CHECK_STATUS.revokeCheck.getValTxt();
		}
		return "";
	}

	public Record getCatalog(){
		Record record=Db.findFirstByCache(Consts.CACHE_NAMES.article.name(),"findCatalogByArticle"+getId(),"select * from c_mapping m left join c_taxonomy t on m.taxonomy_id=t.id where m.content_id=? and t.type='catalog' ",getId());
		return record;
	}

	public Record getArea(){
		Record record=Db.findFirstByCache(Consts.CACHE_NAMES.article.name(),"findAreaByArticle"+getId(),"select * from c_mapping m left join c_taxonomy t on m.taxonomy_id=t.id where m.content_id=? and t.type='area' ",getId());
		return record;
	}

	public String getCommentStatusTxt(){
		if(getCommentStatus().equals(Consts.YORN_STR.yes.getVal())){
			return Consts.YORN_STR.yes.getLabel();
		}else if(getCommentStatus().equals(Consts.YORN_STR.no.getVal())){
			return Consts.YORN_STR.no.getLabel();
		}
		return "";
	}

	public String getGoodTxt(){
		return (getGood())?Consts.YORN.yes.getLabel():Consts.YORN.no.getLabel();
	}

	public String getTopTxt(){
		return (getTop())?Consts.YORN.yes.getLabel():Consts.YORN.no.getLabel();
	}
	public String getOriginalTxt(){
		return (StrKit.isBlank(getLinkTo()))?Consts.YORN_STR.yes.getLabel():Consts.YORN_STR.no.getLabel();
	}

	public List<Record> getTags(){
		List<Record> tags=Db.findByCache(Consts.CACHE_NAMES.article.name(),"findTagsByArticle"+getId(),"select * from c_mapping m left join c_taxonomy t on m.taxonomy_id=t.id where m.content_id=? and t.type='tag' ",getId());
		return tags;
	}

	public List<Content> findNewContent(int limit){
		String sql="select * from c_content where d_at is null order by c_at desc limit 0,?";
		return dao.findByCache(Consts.CACHE_NAMES.article.name(),"findNewContent"+limit,sql,limit);
	}


	public Page<Content> findContentByTIdAndType(Integer tId, int pn, int ps,String taxonomyType){
		StringBuilder sb=new StringBuilder();
		sb.append(" from c_content cc,c_mapping cm,c_taxonomy ct where cc.id=cm.content_id and cm.taxonomy_id=ct.id and cc.d_at is null and ct.type=? ");

		if(tId==null){
			sb.append(" order by cc.top ,cc.good,cc.c_at desc ");
			return dao.paginateByCache(Consts.CACHE_NAMES.article.name(),"findContentByTId"+tId+pn+ps,pn,ps,"select cc.*  ",sb.toString(),taxonomyType);
		}else{
			sb.append(" and cm.taxonomy_id=?");
			sb.append(" order by cc.top ,cc.good,cc.c_at desc ");
			return dao.paginateByCache(Consts.CACHE_NAMES.article.name(),"findContentByTId"+tId+pn+ps,pn,ps,"select cc.*  ",sb.toString(),taxonomyType,tId);
		}

	}

	/**
	 * 查询后一个内容
	 * @param id	当前id
	 * @param tId	分类id
	 * @return
	 */
	public Content findAdjoinNext(int id,int tId){
		StringBuilder sb=new StringBuilder();
		sb.append("(select cc.* from c_content cc,c_mapping cm where cc.id=cm.content_id and cc.id>? and cc.d_at is null ");
		if(tId!=0){
			sb.append(" and cm.taxonomy_id=?");
			sb.append(" order by cc.top ,cc.good,cc.c_at desc limit 1)");
			return dao.findFirstByCache(Consts.CACHE_NAMES.article.name(),"findAdjoinNext"+id+tId,sb.toString(),id,tId);
		}else {
			sb.append(" order by cc.top ,cc.good,cc.c_at desc limit 1)");
			return dao.findFirstByCache(Consts.CACHE_NAMES.article.name(),"findAdjoinNext"+id+tId,sb.toString(),id);
		}
	}
	/**
	 * 查询前一个内容
	 * @param id	当前id
	 * @param tId	分类id
	 * @return
	 */
	public Content findAdjoinPre(int id,int tId){
		StringBuilder sb=new StringBuilder();
		sb.append("(select cc.* from c_content cc,c_mapping cm where cc.id=cm.content_id and cc.id<? and cc.d_at is null ");

		if(tId!=0){
			sb.append(" and cm.taxonomy_id=?");
			sb.append(" order by cc.top ,cc.good,cc.c_at desc limit 1)");
			return dao.findFirstByCache(Consts.CACHE_NAMES.article.name(),"findAdjoinPre"+id+tId,sb.toString(),id,tId);
		}else {
			sb.append(" order by cc.top ,cc.good,cc.c_at desc limit 1)");
			return dao.findFirstByCache(Consts.CACHE_NAMES.article.name(),"findAdjoinPre"+id+tId,sb.toString(),id);
		}
	}

	public long findCountInTaxonomy(int tId){
		String sql="select count(*) from c_mapping cm,c_content cc where cm.content_id=cc.id and cc.d_at is null and cm.taxonomy_id=?";
		return Db.queryLong(sql,tId);
	}

}
