package com.dbd.cms.model;

import com.dbd.cms.Consts;
import com.dbd.cms.core.DBDCmsConfig;
import com.dbd.cms.model.base.BaseSupplier;
import com.jfinal.kit.StrKit;

import java.util.ArrayList;
import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Supplier extends BaseSupplier<Supplier> {
	public static final Supplier dao = new Supplier().dao();


	public String getTypeTxt(){
		if(!StrKit.notNull(getType()))return null;
		if(getType().equals("00"))
			return "鱼房";
		else if(getType().equals("01"))
			return "鱼场";
		else if(getType().equals("02"))
			return "鱼店";
		else
			return "其他";
	}

	public  String getCompensateTxt(){
		if(!StrKit.notNull(getCompensate()))return null;
		if(getCompensate().equals("00"))
			return "包损";
		else if(getCompensate().equals("01"))
			return "不包损";
		else if(getCompensate().equals("02"))
			return "包一半";
		else
			return "其他";
	}

	public String getAuthTxt(){
		if(!StrKit.notNull(getAuth()))return null;
		if(getAuth().equals("00"))
			return Consts.YORN_STR.yes.getLabel();
		else
			return Consts.YORN_STR.no.getLabel();
	}

	public String getOrderSupportTxt(){
		if(!StrKit.notNull(getOrderSupport()))return null;
		if(getOrderSupport().equals("00")){
			return "支持";
		}else{
			return "不支持";
		}
	}

	public String getStateTxt(){
		if(!StrKit.notNull(getState()))return null;
		return (getState().equals("0"))?Consts.STATUS.enable.getValTxt(): Consts.STATUS.forbidden.getValTxt();
	}

	public String getSourceTxt(){
		if(!StrKit.notNull(getSource()))return null;
		return (getSource().equals("00"))? Consts.SOURCE.online.getValTxt(): Consts.SOURCE.unline.getValTxt();
	}

	public String getShengTxt(){
		if(!StrKit.notNull(getSheng()))return null;

		return (String)DBDCmsConfig.getRf().groupTemplate.getSharedVars().get("sheng"+getSheng());
	}
	public String getShiTxt(){
		if(!StrKit.notNull(getShi()))return null;
		return (String)DBDCmsConfig.getRf().groupTemplate.getSharedVars().get("shi"+getShi());
	}
	public String getQuTxt(){
		if(!StrKit.notNull(getQu()))return null;
		return (String)DBDCmsConfig.getRf().groupTemplate.getSharedVars().get("qu"+getQu());
	}

	public List<SupplierPics> getPics(Integer supplierId){
		return SupplierPics.dao.find("select * from f_supplier_pics where supplierId=?",supplierId);
	}

	public String getPicsStr(){
		List<SupplierPics> list=getPics(getId().intValue());
		StringBuilder stringBuilder=new StringBuilder();
		for (SupplierPics sp:list){
			if(stringBuilder.length()==0)
				stringBuilder.append(sp.getPic());
			else
				stringBuilder.append("|").append(sp.getPic());
		}

		return stringBuilder.toString();
	}

	public List<SupplierCatalog> getCatalogs(Integer supplierId){
		List<SupplierCatalog> list=SupplierCatalog.dao.find("select * from f_supplier_catalog where supplierId=?",supplierId);
//		String[] catalogIds=new String[list.size()];
//		for (int i = 0; i < list.size(); i++) {
//			catalogIds[i]=list.get(i).getTaxonomyId().toString();
//		}
//		LogKit.info(catalogIds.toString());
		return list;
	}

	public List<SupplierOrdertype> getOrdertypes(Integer supplierId){
		List<SupplierOrdertype> list=SupplierOrdertype.dao.find("select * from f_supplier_ordertype where supplierId=?",supplierId);
//		String[] otIds=new String[list.size()];
//		for (int i = 0; i < list.size(); i++) {
//			otIds[i]=list.get(i).getTaxonomyId().toString();
//		}
//		LogKit.info(otIds.toString());
		return list;
	}

	public Supplier findAdjoinNext(int id,String sheng,String shi,String qu,String search){
		StringBuilder sb=new StringBuilder();
		sb.append("(select fs.* from f_supplier fs where fs.d_at is null and fs.id>?");
		List<Object> list=new ArrayList<Object>();
		list.add(id);
		if(StrKit.notBlank(sheng)){
			sb.append(" and fs.sheng=?");
			list.add(sheng);

		}
		if(StrKit.notBlank(shi)){
			sb.append(" and fs.shi=?");
			list.add(shi);
		}
		if(StrKit.notBlank(qu)){
			sb.append(" and fs.qu=?");
			list.add(qu);
		}
		if(StrKit.notBlank(search)){
			search=search.trim();
			sb.append(" and (instr(fs.name,?)>0 or instr(fs.tel,?)>0 )");
			list.add(search);list.add(search);
		}
		sb.append(" order by fs.isTop ,fs.c_at desc limit 1)");
		return dao.findFirstByCache(Consts.CACHE_NAMES.supplierView.name(),"findAdjoinNext"+id+sheng+shi+qu+search,sb.toString(),list.toArray());
	}

	public Supplier findAdjoinPre(int id,String sheng,String shi,String qu,String search){
		StringBuilder sb=new StringBuilder();
		sb.append("(select fs.* from f_supplier fs where fs.d_at is null and fs.id<?");
		List<Object> list=new ArrayList<Object>();
		list.add(id);
		if(StrKit.notBlank(sheng)){
			sb.append(" and fs.sheng=?");
			list.add(sheng);

		}
		if(StrKit.notBlank(shi)){
			sb.append(" and fs.shi=?");
			list.add(shi);
		}
		if(StrKit.notBlank(qu)){
			sb.append(" and fs.qu=?");
			list.add(qu);
		}
		if(StrKit.notBlank(search)){
			search=search.trim();
			sb.append(" and (instr(fs.name,?)>0 or instr(fs.tel,?)>0 )");
			list.add(search);list.add(search);
		}
		sb.append(" order by fs.isTop ,fs.c_at desc limit 1)");
		return dao.findFirstByCache(Consts.CACHE_NAMES.supplierView.name(),"findAdjoinPre"+id+sheng+shi+qu+search,sb.toString(),list.toArray());
	}

}
